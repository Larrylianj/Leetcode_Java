import java.util.*;

public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Solution s = new Solution();
		char board[][] = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		String word = "ABCESEEEFS";
		s.exist(board, word);
	}
	
	public boolean exist(char[][] board, String word) {
        for(int i = 0;i < board.length;i++){
            for(int j = 0;j < board[0].length;j++){
                // bfs on potential position
                if(word.charAt(0) == board[i][j]){
                    boolean[][] visited = new boolean[board.length][board[0].length];
                    for(int m = 0;m < visited.length;m++)
                        for(int n = 0;n < visited[0].length;n++)
                            visited[m][n] = false;
                    Queue<Integer> layer = new LinkedList<Integer>();
                    Queue<Integer> x_pos = new LinkedList<Integer>();
                    Queue<Integer> y_pos = new LinkedList<Integer>();
                    visited[i][j] = true;
                    layer.add(0);
                    x_pos.add(i);y_pos.add(j);
                    while(!x_pos.isEmpty()){
                        int x = x_pos.poll();int y = y_pos.poll();
                        int index = layer.poll()+1;
                        if(index == word.length()){return true;}
                        
                        if(x-1 >= 0){
                            if(!visited[x-1][y] && board[x-1][y] == word.charAt(index)){
                                //if(index == word.length()-1){return true;}
                                visited[x-1][y] = true;
                                layer.add(index);
                                x_pos.add(x-1);y_pos.add(y);
                            }
                        }
                        if(y-1 >= 0){
                            if(!visited[x][y-1] && board[x][y-1] == word.charAt(index)){
                                //if(index == word.length()-1){return true;}
                                visited[x][y-1] = true;
                                layer.add(index);
                                x_pos.add(x);y_pos.add(y-1);
                            }
                        }
                        if(x+1 < board.length){
                            if(!visited[x+1][y] && board[x+1][y] == word.charAt(index)){
                                //if(index == word.length()-1){return true;}
                                visited[x+1][y] = true;
                                layer.add(index);
                                x_pos.add(x+1);y_pos.add(y);
                            }
                        }
                        if(y+1 < board[0].length){
                            if(!visited[x][y+1] && board[x][y+1] == word.charAt(index)){
                                //if(index == word.length()-1){return true;}
                                visited[x][y+1] = true;
                                layer.add(index);
                                x_pos.add(x);y_pos.add(y+1);
                            }
                        }
                    }
                }
                
            }
        }
        return false;
    }

}
