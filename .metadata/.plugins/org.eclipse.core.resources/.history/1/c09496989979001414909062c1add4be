import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

public class Solution {
	
	public static void main(String args[]){
		long start = System.currentTimeMillis();
		Solution s = new Solution();
		int num[] = {-459,-456,-451,-442,-432,-368,-361,-358,-357,-356,-335,-263,-243,-207,-160,-160,-118,-111,-85,-82,-65,-40,-33,-3,-1,3,15,26,44,90,109,134,159,163,204,256,273,281,294,299,334,347,367,369,377,383,403,406,425,447,450,452,460,471,473};
		System.out.println(s.fourSum(num, -2234));
		System.out.println(System.currentTimeMillis()-start);
	}
	
	List<List<Integer>> output = new ArrayList<List<Integer>>();
	HashSet<List<Integer>> visited = new HashSet<List<Integer>>();
	int crossZero;
	int largest;
	final static int pivot = 4;
    public List<List<Integer>> fourSum(int[] num, int target) {
        crossZero = -1;
        Arrays.sort(num);
        largest = num.length==0?-1:num[num.length-1];
        for(int i = 0;i < num.length;i++){
            if(num[i] > 0){
                crossZero = i;
                break;
            }
        }
        search(0,target,0,num, new ArrayList<Integer>());
        return output;
    }
    
    private void search(int sum, int target, int index, int[] num, List<Integer> lst){
        if(lst.size()==pivot){
            if(sum == target)
            	if(!visited.contains(lst)){
            		visited.add(lst);
            		output.add(lst);
            	}
            return;
        }
        if(index >= crossZero && sum >= target){return;}
        for(int i = index;i <= num.length-(pivot-lst.size());i++){
            if(sum + (pivot-lst.size())*largest < target){continue;}
            List<Integer> newlst = new ArrayList<Integer>(lst);
            newlst.add(num[i]);
            search(sum + num[i], target, i+1, num, newlst);
        }
        return;
    }
}
