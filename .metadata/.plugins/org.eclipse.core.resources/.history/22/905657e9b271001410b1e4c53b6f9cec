import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;

public class Solution {
	
	public static void main(String arg[]){
		String s = "(()(((()";
		Solution ss = new Solution();
		System.out.print(ss.longestValidParentheses(s));
	}
	
	
	// DP get time limited
//	public int longestValidParentheses(String s) {
//        int n = s.length();
//        boolean opt[][] = new boolean[n][n];
//        int max = 0;
//        
//        // base case
//        
//        // iteration
//        for(int offset = 1;offset < n;offset++){
//            for(int i = 0;i < n;i++){
//                int j = i+offset;
//                if(j < n){
//                    if(s.charAt(i)=='(' && s.charAt(j)==')'){
//                        if(opt[i+1][j-1] || i+1==j){opt[i][j] = true;}
//                        for(int t = i;t < j-1;t++)
//                            if(opt[i][t] && opt[t+1][j])
//                                opt[i][j] = true;
//                    }
//                    if(opt[i][j]){
//                        if(j-i+1 > max)
//                            max = j-i+1;
//                    }
//                }
//            }
//        }
//        return max;
//    }
	
	public int longestValidParentheses(String s) {
        Stack<Integer> stack = new Stack<Integer>();
        Queue<Range> queue = new LinkedList<Range>();
        int count = 0;
        int max = 0;
        // find all valid ranges
        for(int i = 0;i < s.length();i++){
            if(s.charAt(i) == '('){
                if(stack.isEmpty()){
                    Range range = new Range(i-2*count+1,i);
                    queue.add(range);
                    count = 0;
                }
                stack.push(1);
            }else{
                if(!stack.isEmpty()){
                    count++;
                    stack.pop();
                }
            }
        }
        if(count != 0){
            Range range = new Range(s.length()-1-2*count+1,s.length()-1);
            queue.add(range);
        }
        
        // concatenate consecutive ranges to get maximum
        
        
        return max;
    }
}

class Range{
    int begin;
    int end;
    Range(int x,int y){
        begin = x;
        end = y;
    }
}
