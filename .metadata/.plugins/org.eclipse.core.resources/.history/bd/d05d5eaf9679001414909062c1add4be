import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

public class Solution {
	
	public static void main(String args[]){
		Solution s = new Solution();
		int num[] = {-497,-494,-484,-477,-453,-453,-444,-442,-428,-420,-401,-393,-392,-381,-357,-357,-327,-323,-306,-285,-284,-263,-262,-254,-243,-234,-208,-170,-166,-162,-158,-136,-133,-130,-119,-114,-101,-100,-86,-66,-65,-6,1,3,4,11,69,77,78,107,108,108,121,123,136,137,151,153,155,166,170,175,179,211,230,251,255,266,288,306,308,310,314,321,322,331,333,334,347,349,356,357,360,361,361,367,375,378,387,387,408,414,421,435,439,440,441,470,492};
		System.out.print(s.fourSum(num, 1682));
	}
	
	List<List<Integer>> output = new ArrayList<List<Integer>>();
	HashSet<List<Integer>> visited = new HashSet<List<Integer>>();
	int crossZero;
	int largest;
	final static int pivot = 4;
    public List<List<Integer>> fourSum(int[] num, int target) {
        crossZero = -1;
        Arrays.sort(num);
        largest = num.length==0?-1:num[num.length-1];
        for(int i = 0;i < num.length;i++){
            if(num[i] > 0){
                crossZero = i;
                break;
            }
        }
        search(0,target,0,num, new ArrayList<Integer>());
        return output;
    }
    
    private void search(int sum, int target, int index, int[] num, List<Integer> lst){
        if(lst.size()==pivot){
            if(sum == target)
            	if(!visited.contains(lst)){
            		visited.add(lst);
            		output.add(lst);
            	}
            return;
        }
        if(index >= crossZero && sum >= target){return;}
        for(int i = index;i <= num.length-(pivot-lst.size());i++){
            if(sum + (pivot-lst.size())*largest < target){continue;}
            List<Integer> newlst = new ArrayList<Integer>(lst);
            newlst.add(num[i]);
            search(sum + num[i], target, i+1, num, newlst);
        }
        return;
    }
}
