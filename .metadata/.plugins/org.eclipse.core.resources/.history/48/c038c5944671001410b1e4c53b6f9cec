import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;

public class Solution {
	
	public static void main(String arg[]){
		String s = "()(()";
		Solution ss = new Solution();
		System.out.print(ss.longestValidParentheses(s));
	}
	
	public int longestValidParentheses(String s) {
        Stack<Integer> stack = new Stack<Integer>();
        Queue<Range> ranges = new LinkedList<Range>();
        int begin = -2;
        int end = begin;
        int count = 0;
        int max = 0;
        // find all valid parentheses groups
        for(int i = 0;i < s.length();i++){
            if(s.charAt(i) == '('){
                if(stack.isEmpty()){
                    Range range = new Range(end-2*count+1,end);
                    ranges.add(range);
                    begin = i;
                    end = begin;
                    count = 0;
                }else{
                    end++;
                }
                stack.push(1);
            }else{
                if(!stack.isEmpty()){
                    count++;
                    end++;
                    stack.pop();
                }
            }
        }
        Range range = new Range(end-2*count+1,end);
        ranges.add(range);
        
        // find longest combination
        if(!ranges.isEmpty()){
            Range curRange;
            Range preRange = ranges.poll();
            count = 0;
            while(!ranges.isEmpty()){
                curRange = ranges.poll();
                if(preRange.end+1==curRange.begin){
                    count += (curRange.end-curRange.begin+1);
                }else{
                    if(count > max)
                        max = count;
                    count = (curRange.end-curRange.begin+1);
                }
                preRange = curRange;
            }
            if(count > max)
                max = count;
            
        }
  
        return max;
    }
}

class Range{
    int begin;
    int end;
    Range(int x,int y){
        begin = x;
        end = y;
    }
}